package bridgeLabzDatastructure;

public class PrimeNumbers2D {
	static int capacityPrimeNum=10;
	static int primenum[]=new int[capacityPrimeNum];
	static int capacity=10;
	static int prime2D[][]=new int[10][capacity];
public static void main(String[] args) {
	createPrimeNumberInArray(0,1000);
	printPrime();
	
}
public static void createPrimeNumberInArray(int k, int l) {
	int index=0;
	for(int i=k+2;i<=l;i++)
	{
		if(isPrime(i))
		{
			if(index==capacity)
			{
				expand1D();
			}	
			primenum[index]=i;
			index++;
		}
		
	}
	storePrimeIn2D();
	
}
private static void storePrimeIn2D() {
	int indexRow=0,indexCol=0;
	for(int i=0;i<primenum.length;i++)
	{
		if(indexCol==capacity)
		{
			expand();
		}	
		prime2D[indexRow][indexCol]=i;
		indexCol++;
		if(i%100==0)
		{
			indexRow++;
			indexCol=0;
		}
	}
	
}
private static void expand1D() {
	int length=primenum.length;
	capacity=(capacity*3)/2;
	int prime2[]=new int[capacity];
	for(int i=0;i<length;i++)
	{
		prime2[i]=primenum[i];
	}
	prime2=primenum;
	prime2=null;
	
}
private static boolean isPrime(int i) {
	int count=0;
	for(int j=2;j<=Math.sqrt(i);j++)
	{
		if(i%j==0)
		{
			count++;
			break;
		}
	}
	if(count==0&&i!=0&&i!=1)
		return true;
	else 
		return false;
	
}
private static void printPrime() {
	int l=0;
	for(int i=0;i<10;i++)
	{
		System.out.print(l+"-"+(l+100)+" : ");
		for(int j=0;j<capacity;j++)
		{
			if(prime2D[i][j]==0)
				System.out.print("  ");
			else
				System.out.print(prime2D[i][j]+" ");
		}
		System.out.println();
		l+=100;
	}
	
}
private static void expand() {
	int cap=capacity;
	capacity=(capacity*3)/2;
	int prime2[][]=new int[10][capacity];
	for(int i=0;i<10;i++)
	{
		for(int j=0;j<cap;j++ )
			prime2[i][j]=prime2D[i][j];
	}
	prime2D=prime2;
	prime2=null;
	
}
}
