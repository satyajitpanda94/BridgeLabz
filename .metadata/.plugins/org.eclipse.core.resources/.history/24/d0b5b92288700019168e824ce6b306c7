package bridgeLabzDatastructure;

public class CalendarQueue {
	public static void main(String[] args) {
		int month=Integer.parseInt(args[0]);
		int year=Integer.parseInt(args[1]);
		Queue<Integer,Integer> q=new Queue<>();
		printCalendar(month,year,q);
	}

	private static void printCalendar(int month, int year, Queue<Integer, Integer> q) {
		creatCalendar(month,year,q);
		System.out.println(Calendar.months[month-1]+", "+year);
	    System.out.println("sun\tmon\ttue\twed\tthr\tfri\tsat");
	    int dayOfWeek=Calendar.findFirstDay(1,month,year);
		for(int j=1;j<=Calendar.noOfDaysOfMonths[month-1]+dayOfWeek;j++)
		{
			int i=0,k=0;
			if(i<dayOfWeek)
			{
				System.out.print(" \t");
				i++;
			}
			else
				System.out.print(q.dequeue()+"\t");
			k++;
			if(k>6)
		    {
				System.out.println();
				k=0;
			}
		}
		
	}
	private static void creatCalendar(int month, int year, Queue<Integer, Integer> q)
	{
		if(Calendar.isLeapYear(year))
	    {
	    	Calendar.noOfDaysOfMonths[1]=29;
	    }
	    int dayOfWeek=Calendar.findFirstDay(1,month,year);
		for(int j=1;j<=Calendar.noOfDaysOfMonths[month-1];j++)
		{
			q.enqueue(dayOfWeek,j);
			dayOfWeek++;
			if(dayOfWeek>6)
			     dayOfWeek=0;
		}
	}
}
class Node<D,DT>
{
	D day;
	DT date;
	Node<D,DT> Next;
}
class Queue<D,DT>
{
	Node<D,DT> head;
	public void enqueue(D day,DT date)
	{
		Node<D,DT> n=new Node<>();
		n.day=day;
		n.date=date;
		
		if(head==null)
			head=n;
		else
		{
			Node<D,DT> n1=head;
			while(n1.Next!=null)
			{
				n1=n1.Next;
			}
			n1.Next=n;
		}
	}
	public DT dequeue()
	{
		if(head==null)
			return null;
		Node<D,DT> n=head;
		head=head.Next;
		DT temp=n.date;
		n=null;
		return temp;
	}
}
